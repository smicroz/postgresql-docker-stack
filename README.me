# PostgreSQL Docker Setup

Este directorio contiene una configuración completa de Docker para PostgreSQL con pgAdmin incluido.

## Características

- **PostgreSQL 15 Alpine**: Base de datos principal con imagen optimizada
- **pgAdmin 4**: Interfaz web para administración de la base de datos
- **Volumes persistentes**: Los datos se mantienen entre reinicios
- **Health checks**: Monitoreo automático del estado de la base de datos
- **Variables de entorno**: Configuración segura mediante archivos .env
- **Red dedicada**: Comunicación segura entre contenedores

## Estructura de archivos

```
postgresql/
├── docker-compose.yml              # Configuración principal de Docker (mejorada)
├── .env.example                   # Plantilla de variables de entorno (público)
├── .env                          # Variables de entorno (privado, crear desde .env.example)
├── .gitignore                    # Archivos a ignorar en Git
├── README.me                     # Esta documentación
├── check-prerequisites.sh        # Script de verificación de pre-requisitos
├── configure-post-hardening.sh  # Script de configuración post-hardening
├── quick-start.sh               # Script de inicio rápido
├── backup.sh                    # Script de backup automatizado
├── maintenance.sh               # Script de mantenimiento y administración
├── init-scripts/                # Scripts SQL de inicialización (opcional)
├── backups/                     # Directorio de backups (se crea automáticamente)
└── emergency_backups/           # Backups de emergencia (se crea automáticamente)
```

## Configuración inicial

1. **Verificar pre-requisitos:**
   ```bash
   ./check-prerequisites.sh
   ```

2. **Copiar variables de entorno:**
   ```bash
   cp .env.example .env
   ```

3. **Editar el archivo .env** con tus credenciales:
   ```bash
   nano .env
   ```

4. **Crear directorio de scripts (opcional):**
   ```bash
   mkdir -p init-scripts
   ```

## Configuración Post-Hardening

Si has ejecutado un script de hardening de seguridad en tu servidor, necesitas configurar el firewall y los puertos para PostgreSQL:

1. **Ejecutar el script de configuración post-hardening:**
   ```bash
   sudo ./configure-post-hardening.sh
   ```

   Este script configurará automáticamente:
   - Reglas UFW para PostgreSQL y pgAdmin
   - Fail2Ban para protección contra ataques de fuerza bruta
   - Optimizaciones del kernel para PostgreSQL
   - Scripts de monitoreo
   - Rotación de logs

2. **El script preguntará sobre:**
   - Permitir acceso desde internet a PostgreSQL (NO recomendado)
   - Permitir acceso desde internet a pgAdmin (según necesidad)
   - Configuración de redes privadas permitidas

## Uso

### Inicio rápido (recomendado)
```bash
# Configuración automática con detección de hardening
./quick-start.sh

# Con permisos de root si se detecta hardening
sudo ./quick-start.sh
```

### Inicio manual
#### Iniciar los servicios
```bash
docker-compose up -d
```

#### Ver logs
```bash
# Todos los servicios
docker-compose logs -f

# Solo PostgreSQL
docker-compose logs -f postgres

# Solo pgAdmin
docker-compose logs -f pgadmin
```

#### Detener los servicios
```bash
docker-compose down
```

#### Detener y eliminar volumes (⚠️ ELIMINA TODOS LOS DATOS)
```bash
docker-compose down -v
```

## Acceso

### PostgreSQL
- **Host**: localhost
- **Puerto**: 5432 (configurable en .env)
- **Base de datos**: Definida en POSTGRES_DB
- **Usuario**: Definido en POSTGRES_USER
- **Contraseña**: Definida en POSTGRES_PASSWORD

### pgAdmin
- **URL**: http://localhost:5050 (configurable en .env)
- **Email**: Definido en PGADMIN_EMAIL
- **Contraseña**: Definida en PGADMIN_PASSWORD

## Conexión desde aplicaciones

### String de conexión
```
postgresql://username:password@localhost:5432/database_name
```

### Ejemplo con psql
```bash
psql -h localhost -p 5432 -U your_user -d your_database
```

## Scripts de inicialización

Puedes agregar scripts SQL o shell en el directorio `init-scripts/` que se ejecutarán automáticamente al crear la base de datos por primera vez:

```sql
-- init-scripts/01-create-tables.sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Backup y Restore

### Backup automatizado
```bash
# Backup de la base de datos principal
./backup.sh

# Backup de todas las bases de datos
./backup.sh --all

# Backup con compresión
./backup.sh --all --compress

# Backup de base de datos específica
./backup.sh --database mi_base_datos

# Backup con retención personalizada (30 días)
./backup.sh --all --retention 30

# Mostrar ayuda
./backup.sh --help
```

### Backup manual
```bash
# Crear backup manual
docker-compose exec postgres pg_dump -U your_user your_database > backup.sql

# Backup completo del cluster
docker-compose exec postgres pg_dumpall -U your_user > cluster_backup.sql
```

### Restaurar backup
```bash
# Restaurar desde backup
docker-compose exec -T postgres psql -U your_user your_database < backup.sql

# Restaurar cluster completo
docker-compose exec -T postgres psql -U your_user < cluster_backup.sql
```

## Troubleshooting

### Ver estado de contenedores
```bash
docker-compose ps
```

### Acceder al contenedor de PostgreSQL
```bash
docker-compose exec postgres bash
```

### Verificar conectividad
```bash
docker-compose exec postgres pg_isready -U your_user
```

### Reiniciar servicios
```bash
docker-compose restart
```

### Monitoreo post-hardening
```bash
# Script de monitoreo completo
sudo /usr/local/bin/postgresql-monitor.sh

# Ver estado del firewall
sudo ufw status

# Ver estado de Fail2Ban
sudo fail2ban-client status
sudo fail2ban-client status postgresql

# Herramientas de mantenimiento
./maintenance.sh status          # Estado de servicios
./maintenance.sh health          # Verificación de salud
./maintenance.sh monitor         # Monitoreo en tiempo real
./maintenance.sh security        # Verificar configuración de seguridad
./maintenance.sh maintenance     # Tareas de mantenimiento PostgreSQL
```

### Problemas comunes después del hardening

1. **No puedo conectarme a PostgreSQL:**
   - Verificar que UFW permite el puerto: `sudo ufw status | grep 5432`
   - Ejecutar el script post-hardening si no se ha hecho

2. **pgAdmin no carga:**
   - Verificar que UFW permite el puerto: `sudo ufw status | grep 5050`
   - Comprobar logs: `docker-compose logs pgadmin`

3. **Conexión bloqueada por Fail2Ban:**
   - Ver IPs bloqueadas: `sudo fail2ban-client status postgresql`
   - Desbloquear IP: `sudo fail2ban-client set postgresql unbanip YOUR_IP`

## Seguridad

### Características de seguridad implementadas
- ✅ Contraseñas definidas en variables de entorno
- ✅ Red interna para comunicación entre contenedores
- ✅ Volumes con permisos apropiados
- ✅ Health checks para monitoreo
- ✅ Archivo .env excluido de Git
- ✅ Límites de recursos para prevenir DoS
- ✅ Configuraciones de seguridad adicionales (no-new-privileges)
- ✅ Configuración UFW post-hardening
- ✅ Fail2Ban para PostgreSQL
- ✅ Optimizaciones del kernel

### Scripts de seguridad
- `configure-post-hardening.sh`: Configura firewall y seguridad después del hardening
- Configuración automática de UFW para puertos PostgreSQL y pgAdmin
- Protección Fail2Ban contra ataques de fuerza bruta
- Monitoreo de seguridad integrado

### Mejores prácticas aplicadas
1. **Autenticación**: MD5 para conexiones remotas, trust para locales
2. **Red**: Solo redes privadas permitidas por defecto
3. **Recursos**: Límites de CPU y memoria configurados
4. **Logs**: Rotación automática de logs de Docker
5. **Backups**: Sistema automatizado con retención configurable

## Recursos adicionales

- [Documentación oficial de PostgreSQL](https://www.postgresql.org/docs/)
- [Documentación de pgAdmin](https://www.pgadmin.org/docs/)
- [Docker Hub - PostgreSQL](https://hub.docker.com/_/postgres)
- [Docker Hub - pgAdmin](https://hub.docker.com/r/dpage/pgadmin4/)